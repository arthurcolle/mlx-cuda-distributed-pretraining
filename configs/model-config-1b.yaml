name: "Llama-1B"
overwrite: true
data:
  input_file: "train.jsonl"
  # Optional validation file
  validation_file: "val.jsonl"
  # Optional external tokenizer path
  tokenizer_path: "tokenizer"  # Path to a directory containing tokenizer.json
  preprocessing:
    max_context_size: 2048
    chunk_overlap: 128  # If > 0, chunks will overlap by this many tokens
    
  tokenizer:
    normal_vocab_size: 256
    special_tokens:
      pad: "<pad>"
      bos: "<bos>"
      eos: "<eos>"

model:
  architecture: "llama"
  dimensions:
    # For a ~1B param model based on Llama architecture
    hidden_size: 2048
    intermediate_size: 5632  # ~2.75x hidden_size
    num_layers: 16
  attention:
    num_heads: 16
    num_kv_heads: 16  # For standard attention
    head_dim: 128  # 2048/16
    max_position_embeddings: 2048
  normalization:
    rms_norm_eps: 1.0e-5
  rope:
    theta: 10000
    traditional: false
    scaling: null
  misc:
    attention_bias: false
    mlp_bias: false
    tie_word_embeddings: true

training:
  # Number of epochs to train for (optional)
  epochs: null
  hyperparameters:
    batch_size: 32  # Will be automatically adjusted based on available GPU memory
    learning_rate: 3.0e-4
    weight_decay: 0.1
    gradient_clip: 1.0
    iters: 20000  # Train for a fixed number of iterations
    
  scheduler:
    type: "cosine_with_warmup"  # Options: linear, cosine, cosine_with_warmup
    min_lr_ratio: 0.1  # Minimum LR as a ratio of initial LR
    warmup_steps: 2000  # Warm up over first 2000 steps
    
  optimization:
    optimizer: "adamw"  # Options: adam, adamw, muon, sgd
    betas: [0.9, 0.95]
    eps: 1.0e-8

logging:
  log_dir: "logs"
  checkpoint_dir: "checkpoints"
  steps:
    logging_interval: 10
    checkpoint_interval: 1000
    validation_interval: 500  # Run validation every 500 steps
  metrics:
    log_loss: true
    log_perplexity: true
    log_tokens_per_second: true
    log_learning_rate: true
    log_tokens_processed: true

system:
  seed: 42
  device: "gpu"  # Will be overridden by Modal settings
  distributed: true  # Enable distributed training
  devices: ["gpu"]  # We'll use primarily CUDA GPUs on Modal
  cuda_devices: [0, 1]  # Using 2x A10G GPUs on Modal